{"mappings":"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","sources":["<anon>","src/assets/js/modules/taskButtons.js","src/assets/js/modules/utils.js"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequireb18d\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"2hgwE\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $1a89fcf2dcafee2d$export$2e2bcd8739ae039; });\n\nvar $cbNRq = parcelRequire(\"cbNRq\");\nclass $1a89fcf2dcafee2d$var$TaskButtons {\n    constructor(){\n        this.windows = Array.from(document.querySelectorAll(\".window\"));\n        this.taskButtons = Array.from(document.querySelectorAll(\".task-button\"));\n        this.settingsTaskButton = document.querySelector(\"#settings-task-button\");\n        this.init();\n    }\n    init() {\n        this.bindEvents();\n        this.taskButtons.forEach((button)=>{\n            const windowEl = (0, $cbNRq.getCorrespondingWindow)(button);\n            if (windowEl) button.hidden = windowEl.hidden;\n        });\n    }\n    bindEvents() {\n        this.taskButtons.forEach((btn)=>btn.addEventListener(\"click\", this.handleClick.bind(this)));\n        document.documentElement.addEventListener(\"settingstoggled\", this.toggleSettingsButtonVisibility.bind(this));\n        this.windows.forEach((windowEl)=>windowEl.addEventListener(\"activewindow\", this.toggleActiveState.bind(this)));\n    }\n    handleClick(e) {\n        const { currentTarget: currentTarget } = e;\n        const isUsingMouse = e.pageX ? true : false;\n        const currentWindow = (0, $cbNRq.getCorrespondingWindow)(currentTarget);\n        if (!currentWindow) return;\n        const isPressed = (0, $cbNRq.getStateBoolean)(currentTarget, \"aria-pressed\");\n        const isMinimized = (0, $cbNRq.getStateBoolean)(currentWindow, \"data-minimized\");\n        (0, $cbNRq.removeOutlineFromElement)(currentTarget, isUsingMouse);\n        if (isPressed !== isMinimized) currentWindow.dispatchEvent(new CustomEvent(\"toggleminimize\", {\n            detail: {\n                windowEl: currentWindow,\n                isPressed: isPressed\n            }\n        }));\n        if (!isPressed && !isMinimized) currentWindow.dispatchEvent(new Event(\"mousedown\"));\n    }\n    toggleActiveState(e) {\n        const windowEl = e.currentTarget;\n        const taskButton = (0, $cbNRq.getCorrespondingTaskButton)(windowEl);\n        if (taskButton) {\n            this.taskButtons.forEach((button)=>button.setAttribute(\"aria-pressed\", \"false\"));\n            taskButton.hidden = false;\n            taskButton.setAttribute(\"aria-pressed\", \"true\");\n        }\n    }\n    toggleSettingsButtonVisibility(e) {\n        const { isOpen: isOpen } = e.detail;\n        this.settingsTaskButton.hidden = !isOpen;\n    }\n}\nif (document.querySelector(\".task-button\")) new $1a89fcf2dcafee2d$var$TaskButtons();\nvar $1a89fcf2dcafee2d$export$2e2bcd8739ae039 = $1a89fcf2dcafee2d$var$TaskButtons;\n\n});\nparcelRegister(\"cbNRq\", function(module, exports) {\n\n$parcel$export(module.exports, \"getDraggableType\", function () { return $8dfd306f90bd34b8$export$a928e70d6a30fd4c; });\n$parcel$export(module.exports, \"getDraggableItemName\", function () { return $8dfd306f90bd34b8$export$e3f114b3a81aa7ab; });\n$parcel$export(module.exports, \"checkIfOverlap\", function () { return $8dfd306f90bd34b8$export$c54a5cf0c37114c7; });\n$parcel$export(module.exports, \"populateStorage\", function () { return $8dfd306f90bd34b8$export$5cd1e178893711f6; });\n$parcel$export(module.exports, \"getLastPositionFromLocalStorage\", function () { return $8dfd306f90bd34b8$export$3bed5c89b8fe1fa6; });\n$parcel$export(module.exports, \"getMaxZIndex\", function () { return $8dfd306f90bd34b8$export$8e3ef38172163b4d; });\n$parcel$export(module.exports, \"getStateBoolean\", function () { return $8dfd306f90bd34b8$export$c7e90bd4419dea2d; });\n$parcel$export(module.exports, \"getCorrespondingTaskButton\", function () { return $8dfd306f90bd34b8$export$374724bc3663e8ea; });\n$parcel$export(module.exports, \"getCorrespondingWindow\", function () { return $8dfd306f90bd34b8$export$e5a3ff51a99818e7; });\n$parcel$export(module.exports, \"removeOutlineFromElement\", function () { return $8dfd306f90bd34b8$export$ced06d1ab8f0e6ee; });\nconst $8dfd306f90bd34b8$export$a928e70d6a30fd4c = (draggable)=>{\n    return draggable.target.dataset.draggable;\n};\nconst $8dfd306f90bd34b8$export$e3f114b3a81aa7ab = (draggable)=>{\n    return draggable.target.dataset.item;\n};\nconst $8dfd306f90bd34b8$export$c54a5cf0c37114c7 = (draggable, elements)=>{\n    if ($8dfd306f90bd34b8$export$a928e70d6a30fd4c(draggable) !== \"icon\") return null;\n    elements = elements.filter((el)=>el.dataset.minimized !== \"true\");\n    return elements.some((el)=>draggable.hitTest(el, \"25%\"));\n};\nconst $8dfd306f90bd34b8$export$5cd1e178893711f6 = (item, value)=>{\n    localStorage.setItem(item, JSON.stringify(value));\n};\nconst $8dfd306f90bd34b8$export$3bed5c89b8fe1fa6 = (draggable)=>{\n    return JSON.parse(localStorage.getItem(`${draggable.target.dataset.item}-position`));\n};\nconst $8dfd306f90bd34b8$export$8e3ef38172163b4d = ([elementA, elementB])=>{\n    let zIndexes = [\n        getComputedStyle(elementA).zIndex,\n        getComputedStyle(elementB).zIndex\n    ];\n    zIndexes = zIndexes.map((zIndex)=>zIndex === \"auto\" ? 0 : parseInt(zIndex));\n    return zIndexes.reduce((zIndexA, zIndexB)=>Math.max(zIndexA, zIndexB));\n};\nconst $8dfd306f90bd34b8$export$c7e90bd4419dea2d = (el, stateAttr)=>{\n    return el.getAttribute(stateAttr) === \"true\" ? true : false;\n};\nconst $8dfd306f90bd34b8$export$374724bc3663e8ea = (windowEl)=>{\n    return document.querySelector(`#${windowEl.dataset.task}`);\n};\nconst $8dfd306f90bd34b8$export$e5a3ff51a99818e7 = (taskButton)=>{\n    return document.querySelector(`.window[data-task=\"${taskButton.id}\"]`);\n};\nconst $8dfd306f90bd34b8$export$ced06d1ab8f0e6ee = (element, isUsingMouse)=>{\n    if (isUsingMouse) {\n        element.classList.add(\"remove-outline\");\n        element.addEventListener(\"blur\", ()=>element.classList.remove(\"remove-outline\"), {\n            once: true\n        });\n    }\n};\n\n});\n\n\n})();\n//# sourceMappingURL=taskButtons.29bba41f.js.map\n","import {\n\tgetCorrespondingTaskButton,\n\tgetCorrespondingWindow,\n\tgetStateBoolean,\n\tremoveOutlineFromElement,\n} from './utils';\n\nclass TaskButtons {\n\tconstructor() {\n\t\tthis.windows = Array.from(document.querySelectorAll('.window'));\n\t\tthis.taskButtons = Array.from(document.querySelectorAll('.task-button'));\n\t\tthis.settingsTaskButton = document.querySelector('#settings-task-button');\n\t\tthis.init();\n\t}\n\n\tinit() {\n\t\tthis.bindEvents();\n\t\tthis.taskButtons.forEach((button) => {\n\t\t\tconst windowEl = getCorrespondingWindow(button);\n\t\t\tif (windowEl) button.hidden = windowEl.hidden;\n\t\t});\n\t}\n\n\tbindEvents() {\n\t\tthis.taskButtons.forEach((btn) =>\n\t\t\tbtn.addEventListener('click', this.handleClick.bind(this))\n\t\t);\n\t\tdocument.documentElement.addEventListener(\n\t\t\t'settingstoggled',\n\t\t\tthis.toggleSettingsButtonVisibility.bind(this)\n\t\t);\n\t\tthis.windows.forEach((windowEl) =>\n\t\t\twindowEl.addEventListener(\n\t\t\t\t'activewindow',\n\t\t\t\tthis.toggleActiveState.bind(this)\n\t\t\t)\n\t\t);\n\t}\n\n\thandleClick(e) {\n\t\tconst { currentTarget } = e;\n\t\tconst isUsingMouse = e.pageX ? true : false;\n\t\tconst currentWindow = getCorrespondingWindow(currentTarget);\n\n\t\tif (!currentWindow) return;\n\n\t\tconst isPressed = getStateBoolean(currentTarget, 'aria-pressed');\n\t\tconst isMinimized = getStateBoolean(currentWindow, 'data-minimized');\n\n\t\tremoveOutlineFromElement(currentTarget, isUsingMouse);\n\n\t\tif (isPressed !== isMinimized) {\n\t\t\tcurrentWindow.dispatchEvent(\n\t\t\t\tnew CustomEvent('toggleminimize', {\n\t\t\t\t\tdetail: { windowEl: currentWindow, isPressed },\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\tif (!isPressed && !isMinimized) {\n\t\t\tcurrentWindow.dispatchEvent(new Event('mousedown'));\n\t\t}\n\t}\n\n\ttoggleActiveState(e) {\n\t\tconst windowEl = e.currentTarget;\n\t\tconst taskButton = getCorrespondingTaskButton(windowEl);\n\n\t\tif (taskButton) {\n\t\t\tthis.taskButtons.forEach((button) =>\n\t\t\t\tbutton.setAttribute('aria-pressed', 'false')\n\t\t\t);\n\n\t\t\ttaskButton.hidden = false;\n\t\t\ttaskButton.setAttribute('aria-pressed', 'true');\n\t\t}\n\t}\n\n\ttoggleSettingsButtonVisibility(e) {\n\t\tconst { isOpen } = e.detail;\n\n\t\tthis.settingsTaskButton.hidden = !isOpen;\n\t}\n}\n\nif (document.querySelector('.task-button')) {\n\tnew TaskButtons();\n}\n\nexport default TaskButtons;\n","export const getDraggableType = (draggable) => {\n\treturn draggable.target.dataset.draggable;\n};\n\nexport const getDraggableItemName = (draggable) => {\n\treturn draggable.target.dataset.item;\n};\n\nexport const checkIfOverlap = (draggable, elements) => {\n\tif (getDraggableType(draggable) !== 'icon') {\n\t\treturn null;\n\t}\n\n\telements = elements.filter((el) => el.dataset.minimized !== 'true');\n\treturn elements.some((el) => draggable.hitTest(el, '25%'));\n};\n\nexport const populateStorage = (item, value) => {\n\tlocalStorage.setItem(item, JSON.stringify(value));\n};\n\nexport const getLastPositionFromLocalStorage = (draggable) => {\n\treturn JSON.parse(\n\t\tlocalStorage.getItem(`${draggable.target.dataset.item}-position`)\n\t);\n};\n\nexport const getMaxZIndex = ([elementA, elementB]) => {\n\tlet zIndexes = [\n\t\tgetComputedStyle(elementA).zIndex,\n\t\tgetComputedStyle(elementB).zIndex,\n\t];\n\n\tzIndexes = zIndexes.map((zIndex) =>\n\t\tzIndex === 'auto' ? 0 : parseInt(zIndex)\n\t);\n\n\treturn zIndexes.reduce((zIndexA, zIndexB) => Math.max(zIndexA, zIndexB));\n};\n\nexport const getStateBoolean = (el, stateAttr) => {\n\treturn el.getAttribute(stateAttr) === 'true' ? true : false;\n};\n\nexport const getCorrespondingTaskButton = (windowEl) => {\n\treturn document.querySelector(`#${windowEl.dataset.task}`);\n};\n\nexport const getCorrespondingWindow = (taskButton) => {\n\treturn document.querySelector(`.window[data-task=\"${taskButton.id}\"]`);\n};\n\nexport const removeOutlineFromElement = (element, isUsingMouse) => {\n\tif (isUsingMouse) {\n\t\telement.classList.add('remove-outline');\n\t\telement.addEventListener(\n\t\t\t'blur',\n\t\t\t() => element.classList.remove('remove-outline'),\n\t\t\t{ once: true }\n\t\t);\n\t}\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$1a89fcf2dcafee2d$export$2e2bcd8739ae039","$cbNRq","$1a89fcf2dcafee2d$var$TaskButtons","constructor","windows","Array","from","document","querySelectorAll","taskButtons","settingsTaskButton","querySelector","init","bindEvents","forEach","button","windowEl","getCorrespondingWindow","hidden","btn","addEventListener","handleClick","bind","documentElement","toggleSettingsButtonVisibility","toggleActiveState","currentTarget","isUsingMouse","pageX","currentWindow","isPressed","getStateBoolean","isMinimized","removeOutlineFromElement","dispatchEvent","CustomEvent","detail","Event","taskButton","getCorrespondingTaskButton","setAttribute","isOpen","$8dfd306f90bd34b8$export$a928e70d6a30fd4c","$8dfd306f90bd34b8$export$e3f114b3a81aa7ab","$8dfd306f90bd34b8$export$c54a5cf0c37114c7","$8dfd306f90bd34b8$export$5cd1e178893711f6","$8dfd306f90bd34b8$export$3bed5c89b8fe1fa6","$8dfd306f90bd34b8$export$8e3ef38172163b4d","$8dfd306f90bd34b8$export$c7e90bd4419dea2d","$8dfd306f90bd34b8$export$374724bc3663e8ea","$8dfd306f90bd34b8$export$e5a3ff51a99818e7","$8dfd306f90bd34b8$export$ced06d1ab8f0e6ee","draggable","target","dataset","item","elements","filter","el","minimized","some","hitTest","value","localStorage","setItem","JSON","stringify","parse","getItem","elementA","elementB","zIndexes","getComputedStyle","zIndex","map","parseInt","reduce","zIndexA","zIndexB","Math","max","stateAttr","getAttribute","task","id","element","classList","add","remove","once"],"version":3,"file":"taskButtons.29bba41f.js.map"}